#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#define DEBUG

/* By. Leo Scarano
 * Rutgers University 
 * 2017
 *
 * This program will take in training data on house prices/attributes, and will use
 * a linear regression model to compute weights. The model is based off of 
 * finding the pseudoinverse, and the inverse method used is Gauss-Jordan 
 * elimination. After the weights are computed, they are applled to a set
 * of hosue attrivutres to estimate the price of the hosue. 
 *
 * Theoretically, the more training  data we have, the better fit we will get 
 *
 */



/* Transposes a matrix
 * index(i,j) of the input matrix becomes index(j,i) for all values in the input matrix
 */
void matrixTranspose(double** inputArray, double** outputArray, int rowSize, int colSize){
	int i, j;
	for(i = 0; i < rowSize; ++i){
		for(j = 0; j < colSize; ++j){
			outputArray[j][i] = inputArray[i][j];
#if defined(DEBUG)
	      		 printf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n");
			 printf("inputArr[%d][%d]: %lf, ouptutArr[%d][%d]: %lf\n", i, j, inputArray[i][j], j, i, outputArray[j][i]);
	      		 printf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n");
#endif		
		}
	}
}

void matrixInverse(double** matrix){

}

// Multiplies 2 matricies, outputs a separate matrix
// This is not an in-place multiplication
void matrixMultiply(double** matrix1, double** matrix2, double** outputMatrix, int row1, int col1, int row2, int col2){
	int i, j, k;
	for(i = 0; i < col2; ++i){
		for(j = 0; j < col1; ++j){
			for(k = 0; k < col1; ++k){
				outputMatrix[i][j] += matrix1[i][k] * matrix2[k][j];
			}	
		}
	}
}

void printArray(double** matrix, int rowSize, int colSize){
	int i, j;
	for(i = 0; i < rowSize; ++i){
		for(j = 0; j < colSize; ++j){
			printf("%lf ", matrix[i][j]);
		}
	printf("\n");
	}
}	


int main(int argc, char* argv[]){
	// check for proper argument usage
	if(argc < 3 || argc > 3){
		printf("ERROR: Inproper use of arguments!\n");
		exit(0);
	}

	// Opening the file with a file pointer
	char* train_filename = argv[1];
	int attribute_count = -1;
	int num_of_mat_entries = -1;
	double** original_matrix;
	FILE* fpointer;
	fpointer = fopen(train_filename, "r");
	
	// if the file cannot be opened properly
	if(fpointer == NULL){
		printf("ERROR: Could not load file\n");
		exit(0);
	}else{
		// reads first two integer values from testing file
		// first value = # of attributes
		// second value = # of training entries
		fscanf(fpointer, "%d", &attribute_count);
		fscanf(fpointer, "%d", &num_of_mat_entries);
		printf("attr: %d, entries: %d\n", attribute_count, num_of_mat_entries);

		// initialize matrix and insert values into it from trainA.txt
		double** X = (double**)malloc(sizeof(double*)*num_of_mat_entries);
		int i;
		for(i = 0; i < num_of_mat_entries; ++i){
			X[i] = (double*)malloc(sizeof(double) * (attribute_count+1));
		}

		// Fill values of the matrix
		int j;
		int counter = 0;
		double temp = 0;
		for(i = 0; i < num_of_mat_entries; ++i){
			for(j = 0; j < (attribute_count+1); ++j){
				if(j = 0){
					X[i][j] = 1;
					continue;
				}
				while(fscanf(fpointer, "%lf", &X[i][j]) != EOF){
					fscanf(fpointer, " ,");
					counter++;
#if defined(DEBUG)
					printf("Counter: %d\n", counter);
#endif
					if(counter >= attribute_count){
						fscanf(fpointer, "%lf", &temp);
						counter = 0;
					}
					break;
				}
			}
		}
		


		printArray(X, num_of_mat_entries, (attribute_count+1));
	}

	
	
#if defined(DEBUG)
	// arrays for testing
	int rowSize = 2;
	int colSize = 2;
	double** arr1 = (double**)malloc(sizeof(double*) * rowSize);
	double** arr2 = (double**)malloc(sizeof(double*) * colSize);
	double** arr3 = (double**)malloc(sizeof(double*) * rowSize);

	// initializing matricies
	int i;
	for(i = 0; i < rowSize; ++i){
		arr1[i] = (double*)malloc(sizeof(double) * colSize);
	}

	for(i = 0; i < colSize; ++i){
		arr2[i] = (double*)malloc(sizeof(double) * rowSize);
	}
	for(i = 0; i < rowSize; ++i){
		arr3[i] = (double*)malloc(sizeof(double) * rowSize);
	}
	
	// filling test matrix
	double temp;

	int j;
	for(i = 0; i < rowSize; ++i){
		for(j = 0; j < colSize; ++j){
			printf("\nEnter a value for the matrix: ");
			scanf(" %lf", &temp);
			arr1[i][j] = temp;
		}
	}

	// printing test matrix
	for(i = 0; i < rowSize; ++i){
		for(j = 0; j < colSize; ++j){
			printf("arr[%d][%d]: %lf\n", i, j, arr1[i][j]);
		}
	}

	// transposing test matricies
	matrixTranspose(arr1, arr2, rowSize, colSize);
	

	printf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n");

	// printing test matrix after transpose
	for(i = 0; i < colSize; ++i){
		for(j = 0; j < rowSize; ++j){
			printf("arr[%d][%d]: %lf\n", i, j, arr2[i][j]);
		}
	}

	// multiplying matricies
	matrixMultiply(arr1, arr2, arr3, rowSize, colSize, colSize, rowSize);

	printf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n");
	// printing test matrix after transpose and multiply
	for(i = 0; i < rowSize; ++i){
		for(j = 0; j < rowSize; ++j){
			printf("arr[%d][%d]: %lf\n", i, j, arr3[i][j]);
		}
	}
	printf("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n");


	printArray(arr1, rowSize, colSize);
#endif
	
	return 0;
}
